"""
Handler para verifica√ß√£o de status de pagamento
VERS√ÉO CORRIGIDA - Busca transa√ß√µes recentes do usu√°rio
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from bot.utils.database import get_db_session
from bot.utils.stripe_integration import verify_payment
from app.models import Transaction, Subscription, Group

logger = logging.getLogger(__name__)


async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Verificar status do pagamento - VERS√ÉO CORRIGIDA"""
    query = update.callback_query
    user = query.from_user
    
    await query.answer("üîÑ Verificando pagamento...")
    
    logger.info(f"Verificando pagamento para usu√°rio {user.id}")
    
    with get_db_session() as session:
        # Buscar transa√ß√µes recentes do usu√°rio (√∫ltimas 24 horas)
        recent_time = datetime.utcnow() - timedelta(hours=24)
        
        transactions = session.query(Transaction).join(
            Subscription
        ).filter(
            Subscription.telegram_user_id == str(user.id),
            Transaction.created_at >= recent_time,
            Transaction.status.in_(['pending', 'processing'])
        ).order_by(
            Transaction.created_at.desc()
        ).all()
        
        logger.info(f"Encontradas {len(transactions)} transa√ß√µes recentes")
        
        if not transactions:
            # Verificar se tem session_id no contexto
            session_id = context.user_data.get('stripe_session_id')
            if session_id:
                logger.info(f"Usando session_id do contexto: {session_id}")
                # Buscar por session_id
                transaction = session.query(Transaction).filter_by(
                    stripe_session_id=session_id
                ).first()
                if transaction:
                    transactions = [transaction]
        
        if not transactions:
            await query.edit_message_text(
                "‚ùå Nenhum pagamento pendente encontrado.\n\nSe voc√™ acabou de fazer um pagamento, aguarde alguns segundos e tente novamente.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† Menu", callback_data="back_to_start")
                ]])
            )
            return
        
        # Verificar cada transa√ß√£o pendente
        payment_confirmed = False
        confirmed_transaction = None
        
        for transaction in transactions:
            logger.info(f"Transa√ß√£o {transaction.id}: status={transaction.status}")
            
            # Verificar se tem stripe_session_id
            if transaction.stripe_session_id:
                logger.info(f"Verificando session_id: {transaction.stripe_session_id}")
                is_paid = await verify_payment(transaction.stripe_session_id)
                
                if is_paid:
                    payment_confirmed = True
                    confirmed_transaction = transaction
                    break
            elif transaction.stripe_payment_intent_id:
                logger.info(f"Verificando payment_intent: {transaction.stripe_payment_intent_id}")
                is_paid = await verify_payment(transaction.stripe_payment_intent_id)
                
                if is_paid:
                    payment_confirmed = True
                    confirmed_transaction = transaction
                    break
            else:
                logger.warning(f"Transa√ß√£o {transaction.id} sem ID de pagamento")
        
        if payment_confirmed and confirmed_transaction:
            await handle_payment_confirmed(query, context, confirmed_transaction, session)
        else:
            await handle_payment_pending(query, context)


async def handle_payment_confirmed(query, context, transaction, db_session):
    """Processar pagamento confirmado"""
    logger.info(f"Pagamento confirmado para transa√ß√£o {transaction.id}")
    
    # Atualizar transa√ß√£o
    transaction.status = 'completed'
    transaction.paid_at = datetime.utcnow()
    
    # Ativar assinatura
    subscription = transaction.subscription
    subscription.status = 'active'
    
    db_session.commit()
    
    # Obter informa√ß√µes do grupo
    group = subscription.group
    
    # Gerar link de convite se n√£o existir
    invite_link = group.invite_link
    if not invite_link and hasattr(group, 'telegram_username') and group.telegram_username:
        invite_link = f"https://t.me/{group.telegram_username}"
    elif not invite_link:
        invite_link = "Link ser√° enviado pelo administrador"
    
    text = f"""
‚úÖ **PAGAMENTO CONFIRMADO!**

Bem-vindo ao grupo **{group.name}**!

üîó **Link de acesso:** `{invite_link}`

üìÖ Sua assinatura est√° ativa at√© {subscription.end_date.strftime('%d/%m/%Y')}.

üí° **Dica:** Clique no link acima para copiar e entrar no grupo!

‚ö†Ô∏è **Importante:** Este link √© pessoal. N√£o compartilhe com outras pessoas.
"""
    
    keyboard = [[
        InlineKeyboardButton("üì± Minhas Assinaturas", callback_data="my_subscriptions"),
        InlineKeyboardButton("üè† Menu", callback_data="back_to_start")
    ]]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # Limpar dados da sess√£o
    context.user_data.pop('stripe_session_id', None)
    context.user_data.pop('checkout', None)
    
    logger.info(f"Usu√°rio {subscription.telegram_user_id} adicionado ao grupo {group.name}")


async def handle_payment_pending(query, context):
    """Processar pagamento pendente"""
    text = """
‚è≥ **Pagamento ainda n√£o confirmado**

Seu pagamento est√° sendo processado. Isso pode levar alguns minutos.

**O que fazer:**
1. Se voc√™ completou o pagamento, aguarde 1-2 minutos
2. Clique em "Verificar Novamente"
3. Se o problema persistir, entre em contato com o suporte

üí° **Dica:** Verifique seu email para a confirma√ß√£o do Stripe.
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üîÑ Verificar Novamente", callback_data="check_payment_status"),
            InlineKeyboardButton("‚ùå Cancelar", callback_data="back_to_start")
        ]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# Fun√ß√£o para ser chamada pelo start quando retornar do pagamento
async def check_payment_from_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Verificar pagamento quando usu√°rio retorna com /start payment_success"""
    user = update.effective_user
    
    logger.info(f"Verificando pagamento ap√≥s retorno do usu√°rio {user.id}")
    
    # Criar um objeto fake de callback query para reusar a l√≥gica
    class FakeQuery:
        def __init__(self, user, message):
            self.from_user = user
            self.message = message
            
        async def answer(self, text=""):
            pass
            
        async def edit_message_text(self, text, parse_mode=None, reply_markup=None):
            await self.message.reply_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
    
    fake_query = FakeQuery(user, update.message)
    await check_payment_status(Update(update_id=update.update_id, callback_query=fake_query), context)
