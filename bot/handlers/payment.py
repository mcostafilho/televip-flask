# bot/handlers/payment.py
"""
Handler para processamento de pagamentos multi-criador
CORRE√á√ÉO: Adicionar stripe_session_id e payment_id na transa√ß√£o
"""
import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from bot.utils.database import get_db_session
from bot.utils.stripe_integration import create_checkout_session
from app.models import Group, PricingPlan, Subscription, Transaction, Creator

logger = logging.getLogger(__name__)

# Taxas da plataforma
FIXED_FEE = 0.99  # R$ 0,99 fixo
PERCENTAGE_FEE = 0.0799  # 7,99%

async def handle_payment_success(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar retorno de pagamento bem-sucedido"""
    user = update.effective_user
    
    # Verificar se temos os dados do checkout
    checkout_data = context.user_data.get('checkout')
    stripe_session_id = context.user_data.get('stripe_session_id')
    
    if not checkout_data:
        # Tentar recuperar do banco de dados
        await show_payment_success_generic(update, context)
        return
    
    # Criar assinatura no banco
    with get_db_session() as session:
        try:
            # Criar nova assinatura - COME√áA COMO PENDING
            new_subscription = Subscription(
                group_id=checkout_data['group_id'],
                plan_id=checkout_data['plan_id'],
                telegram_user_id=str(user.id),
                telegram_username=user.username,
                status='pending',  # MUDAN√áA: Come√ßa como pending at√© confirmar pagamento
                start_date=datetime.utcnow(),
                end_date=datetime.utcnow() + timedelta(days=checkout_data['duration_days']),
                auto_renew=False,
                payment_method='stripe'
            )
            session.add(new_subscription)
            session.flush()  # Para obter o ID
            
            # Criar transa√ß√£o com IDs corretos - PARTE CR√çTICA
            transaction = Transaction(
                subscription_id=new_subscription.id,
                group_id=checkout_data['group_id'],
                amount=checkout_data['amount'],
                fee_amount=checkout_data['platform_fee'],
                net_amount=checkout_data['creator_amount'],
                payment_method='stripe',
                payment_id=stripe_session_id,  # ADICIONAR: Campo para busca
                stripe_session_id=stripe_session_id,  # ADICIONAR: Session ID do Stripe
                status='pending'  # MUDAN√áA: Come√ßa como pending
            )
            session.add(transaction)
            session.commit()
            
            logger.info(f"Transa√ß√£o criada: ID={transaction.id}, Session={stripe_session_id}")
            
            # Mostrar mensagem de processamento
            text = """
‚è≥ **Processando seu pagamento...**

Detectamos o seu pagamento, mas houve um pequeno atraso no processamento.

Isso √© normal e geralmente leva alguns segundos.

**O que est√° acontecendo:**
‚Ä¢ Confirmando pagamento com o processador
‚Ä¢ Ativando sua assinatura
‚Ä¢ Preparando seu acesso ao grupo

Clique no bot√£o abaixo para verificar o status:
"""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ Verificar Status", callback_data="check_payment_status")],
                [
                    InlineKeyboardButton("‚ùì Ajuda", callback_data="help"),
                    InlineKeyboardButton("üè† Menu", callback_data="back_to_start")
                ]
            ]
            
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Erro ao processar pagamento: {e}")
            await show_payment_error(update, context)

async def show_payment_success_generic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostrar mensagem gen√©rica de sucesso quando n√£o temos contexto"""
    text = """
‚úÖ **Pagamento Detectado!**

Estamos processando seu pagamento. 

Se voc√™ acabou de fazer um pagamento, clique em "Verificar Status" abaixo.

Se n√£o, use /start para ver suas assinaturas ativas.
"""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ Verificar Status", callback_data="check_payment_status")],
        [
            InlineKeyboardButton("üè† Menu Principal", callback_data="back_to_start"),
            InlineKeyboardButton("‚ùì Ajuda", callback_data="help")
        ]
    ]
    
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_payment_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostrar erro de pagamento"""
    text = """
‚ùå **Erro no Processamento**

Houve um erro ao processar seu pagamento.

**O que fazer:**
‚Ä¢ Verifique se o pagamento foi debitado
‚Ä¢ Tente novamente em alguns minutos
‚Ä¢ Entre em contato com o suporte se persistir

Nenhuma cobran√ßa foi realizada se voc√™ n√£o concluiu o pagamento.
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üîÑ Tentar Novamente", callback_data="retry_payment"),
            InlineKeyboardButton("‚ùì Ajuda", callback_data="help")
        ],
        [
            InlineKeyboardButton("üè† Menu Principal", callback_data="back_to_start")
        ]
    ]
    
    message = update.message if update.message else update.callback_query.message
    
    await message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Manter o resto das fun√ß√µes existentes do arquivo...
async def handle_plan_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar sele√ß√£o de plano"""
    query = update.callback_query
    await query.answer()
    
    # Extrair IDs do callback data: plan_GROUP-ID_PLAN-ID
    try:
        _, group_id, plan_id = query.data.split('_')
        group_id = int(group_id)
        plan_id = int(plan_id)
    except:
        await query.edit_message_text("‚ùå Erro ao processar sele√ß√£o.")
        return
    
    user = query.from_user
    
    with get_db_session() as session:
        plan = session.query(PricingPlan).get(plan_id)
        group = session.query(Group).get(group_id)
        
        if not plan or not group:
            await query.edit_message_text("‚ùå Plano ou grupo n√£o encontrado.")
            return
        
        creator = group.creator
        
        # Verificar novamente se j√° tem assinatura ativa
        existing_sub = session.query(Subscription).filter_by(
            group_id=group_id,
            telegram_user_id=str(user.id),
            status='active'
        ).first()
        
        if existing_sub:
            days_left = (existing_sub.end_date - datetime.utcnow()).days
            
            text = f"""
‚úÖ **Voc√™ j√° possui uma assinatura ativa!**

**Grupo:** {group.name}
**Plano:** {existing_sub.plan.name}
**Dias restantes:** {days_left}
**Expira em:** {existing_sub.end_date.strftime('%d/%m/%Y')}

Use /status para ver todas suas assinaturas.
"""
            keyboard = [
                [
                    InlineKeyboardButton("üìä Ver Status", callback_data="check_status"),
                    InlineKeyboardButton("üè† Menu", callback_data="back_to_start")
                ]
            ]
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # Calcular valores com taxas
        gross_amount = float(plan.price)
        fixed_fee = FIXED_FEE
        percentage_fee = gross_amount * PERCENTAGE_FEE
        total_fee = fixed_fee + percentage_fee
        creator_amount = gross_amount - total_fee
        
        # Salvar dados do checkout no contexto
        context.user_data['checkout'] = {
            'group_id': group_id,
            'plan_id': plan_id,
            'creator_id': creator.id,
            'amount': gross_amount,
            'platform_fee': total_fee,
            'creator_amount': creator_amount,
            'duration_days': plan.duration_days
        }
        
        # Mostrar resumo do pedido
        text = f"""
üìã **Resumo do Pedido**

**Grupo:** {group.name}
**Criador:** {creator.name}
**Plano:** {plan.name}
**Dura√ß√£o:** {plan.duration_days} dias

üí∞ **Valores:**
‚Ä¢ Valor: R$ {gross_amount:.2f}
‚Ä¢ Taxa da plataforma: R$ {total_fee:.2f}
‚Ä¢ Criador recebe: R$ {creator_amount:.2f}

**Descri√ß√£o do plano:**
{plan.description}

Escolha sua forma de pagamento:
"""
        
        keyboard = [
            [
                InlineKeyboardButton("üí≥ Cart√£o de Cr√©dito", callback_data="pay_stripe"),
                InlineKeyboardButton("üì± PIX", callback_data="pay_pix")
            ],
            [
                InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel")
            ]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar callback de m√©todo de pagamento"""
    query = update.callback_query
    await query.answer()
    
    checkout_data = context.user_data.get('checkout')
    if not checkout_data:
        await query.edit_message_text(
            "‚ùå Sess√£o expirada. Por favor, comece novamente.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† Menu", callback_data="back_to_start")
            ]])
        )
        return
    
    if query.data == "pay_stripe":
        await process_stripe_payment(query, context, checkout_data)
    elif query.data == "pay_pix":
        await query.edit_message_text(
            "üì± PIX em breve! Por enquanto, use cart√£o de cr√©dito.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=f"plan_{checkout_data['group_id']}_{checkout_data['plan_id']}")
            ]])
        )

async def process_stripe_payment(query, context, checkout_data):
    """Processar pagamento via Stripe"""
    user = query.from_user
    
    # URLs de retorno
    bot_username = context.bot.username
    success_url = f"https://t.me/{bot_username}?start=success_{user.id}"
    cancel_url = f"https://t.me/{bot_username}?start=cancel"
    
    # Criar sess√£o no Stripe
    with get_db_session() as session:
        group = session.query(Group).get(checkout_data['group_id'])
        plan = session.query(PricingPlan).get(checkout_data['plan_id'])
        
        result = await create_checkout_session(
            amount=checkout_data['amount'],
            group_name=group.name,
            plan_name=plan.name,
            user_id=str(user.id),
            success_url=success_url,
            cancel_url=cancel_url
        )
    
    if result['success']:
        # Salvar session_id no contexto
        context.user_data['stripe_session_id'] = result['session_id']
        
        text = """
üîê **Redirecionando para pagamento seguro...**

Voc√™ ser√° direcionado para a p√°gina de pagamento do Stripe.

‚úÖ **Pagamento 100% seguro**
üîí Seus dados s√£o protegidos
üí≥ Aceitamos todas as bandeiras

Ap√≥s o pagamento, voc√™ voltar√° automaticamente para o Telegram.
"""
        
        keyboard = [
            [InlineKeyboardButton("üí≥ Pagar com Stripe", url=result['url'])],
            [InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.edit_message_text(
            f"‚ùå Erro ao criar sess√£o de pagamento: {result.get('error', 'Erro desconhecido')}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data=f"plan_{checkout_data['group_id']}_{checkout_data['plan_id']}")
            ]])
        )

async def add_user_to_group(bot, group_telegram_id: str, user_id: int):
    """Adicionar usu√°rio ao grupo ap√≥s pagamento"""
    try:
        # Tentar adicionar usu√°rio ao grupo
        await bot.add_chat_member(
            chat_id=group_telegram_id,
            user_id=user_id
        )
        logger.info(f"Usu√°rio {user_id} adicionado ao grupo {group_telegram_id}")
        return True
    except Exception as e:
        logger.error(f"Erro ao adicionar usu√°rio ao grupo: {e}")
        return False