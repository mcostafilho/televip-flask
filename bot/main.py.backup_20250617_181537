#!/usr/bin/env python3
"""
Bot principal do TeleVIP - Sistema Multi-Criador
CORRE√á√ÉO: Problema de weak reference com Application
"""
import os
import sys
import io
import asyncio
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv

# CORRE√á√ÉO DE ENCODING
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes, JobQueue
)

# Importar handlers
from bot.handlers.start import start_command, help_command, show_user_dashboard
from bot.handlers.payment import handle_plan_selection, handle_payment_callback, handle_payment_success, start_payment
from bot.handlers.subscription import (
    status_command, planos_command, handle_renewal
)
from bot.handlers.admin import (
    setup_command, stats_command, broadcast_command,
    handle_join_request, handle_new_chat_members
)
from bot.handlers.discovery import descobrir_command, handle_discover_callback
from bot.handlers.payment_verification import check_payment_status
from bot.utils.database import get_db_session

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# HANDLERS ADICIONAIS QUE ESTAVAM FALTANDO

async def handle_continue_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para continuar para o menu principal"""
    query = update.callback_query
    await query.answer()
    
    # Marcar para pular verifica√ß√£o de pendentes temporariamente
    context.user_data['skip_pending_check'] = True
    await show_user_dashboard(update, context)
    # Remover flag ap√≥s mostrar
    context.user_data.pop('skip_pending_check', None)

async def handle_payment_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para erros de pagamento"""
    query = update.callback_query
    await query.answer("‚ùå Erro no processamento", show_alert=True)
    
    text = """
‚ùå **Erro no Processamento**

Houve um erro ao processar sua solicita√ß√£o.

Por favor, tente novamente ou entre em contato com o suporte.
"""
    
    keyboard = [[
        InlineKeyboardButton("üîÑ Tentar Novamente", callback_data="back_to_start"),
        InlineKeyboardButton("üìû Suporte", url="https://t.me/suporte_televip")
    ]]
    
    await query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_check_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para verificar status via callback"""
    await status_command(update, context)

async def handle_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para voltar ao menu principal"""
    await show_user_dashboard(update, context)

async def handle_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para mostrar ajuda via callback"""
    query = update.callback_query
    await query.answer()
    
    text = """
üìö **Central de Ajuda**

**‚ùì Perguntas Frequentes:**

**Como fa√ßo para assinar um grupo?**
Clique no link fornecido pelo criador ou use /descobrir

**Como cancelo uma assinatura?**
As assinaturas n√£o renovam automaticamente

**Posso mudar de plano?**
Sim, quando sua assinatura atual expirar

**√â seguro?**
Sim, usamos Stripe para processar pagamentos

**üìû Suporte:**
‚Ä¢ Problemas com pagamento: @suporte_televip
‚Ä¢ D√∫vidas sobre conte√∫do: contate o criador do grupo

üîí Seus dados est√£o seguros e protegidos.
"""
    
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data="back_to_start"),
            InlineKeyboardButton("üìû Suporte", url="https://t.me/suporte_televip")
        ]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para cancelar opera√ß√£o"""
    query = update.callback_query
    await query.answer("‚ùå Opera√ß√£o cancelada")
    
    # Voltar ao dashboard
    await handle_back_callback(update, context)

async def handle_categories_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para callback de categorias"""
    await handle_discover_callback(update, context)

async def handle_premium_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para grupos premium"""
    await handle_discover_callback(update, context)

async def handle_new_groups_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para grupos novos"""
    await handle_discover_callback(update, context)

async def handle_cheap_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para grupos baratos"""
    await handle_discover_callback(update, context)

async def handle_retry_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para tentar pagamento novamente"""
    query = update.callback_query
    await query.answer("üîÑ Redirecionando...")
    
    # Limpar dados antigos
    context.user_data.pop('checkout', None)
    context.user_data.pop('stripe_session_id', None)
    
    # Voltar ao in√≠cio
    await handle_back_callback(update, context)

async def handle_unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para callbacks n√£o reconhecidos"""
    query = update.callback_query
    await query.answer("üöß Fun√ß√£o em desenvolvimento...", show_alert=True)
    logger.warning(f"Callback n√£o reconhecido: {query.data}")

async def post_init(application: Application) -> None:
    """Executado ap√≥s a inicializa√ß√£o do bot"""
    try:
        bot_info = await application.bot.get_me()
        logger.info(f"‚úÖ Bot @{bot_info.username} iniciado com sucesso!")
        logger.info(f"Bot ID: {bot_info.id}")
        logger.info(f"Nome: {bot_info.first_name}")
    except Exception as e:
        logger.error(f"Erro ao obter informa√ß√µes do bot: {e}")

def setup_handlers(application: Application) -> None:
    """Configurar todos os handlers do bot"""
    logger.info("üìã Configurando handlers...")
    
    # Comandos principais
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("planos", planos_command))
    application.add_handler(CommandHandler("descobrir", descobrir_command))
    
    # Comandos administrativos
    application.add_handler(CommandHandler("setup", setup_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    
    # Callbacks de pagamento
    application.add_handler(CallbackQueryHandler(handle_plan_selection, pattern=r"^select_plan_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_payment_callback, pattern=r"^pay_\d+$"))
    application.add_handler(CallbackQueryHandler(check_payment_status, pattern="^check_payment_status$"))
    application.add_handler(CallbackQueryHandler(handle_payment_error, pattern="^payment_error$"))
    application.add_handler(CallbackQueryHandler(handle_retry_payment, pattern="^retry_payment$"))
    # Callbacks de pagamento
    application.add_handler(CallbackQueryHandler(start_payment, pattern=r"^plan_\d+_\d+$"))
    
    # Callbacks de descoberta
    application.add_handler(CallbackQueryHandler(handle_discover_callback, pattern=r"^discover.*$"))
    application.add_handler(CallbackQueryHandler(handle_categories_callback, pattern="^categories$"))
    application.add_handler(CallbackQueryHandler(handle_premium_callback, pattern="^premium$"))
    application.add_handler(CallbackQueryHandler(handle_new_groups_callback, pattern="^new_groups$"))
    application.add_handler(CallbackQueryHandler(handle_cheap_callback, pattern="^cheap$"))
    
    # Callbacks de navega√ß√£o
    application.add_handler(CallbackQueryHandler(handle_back_callback, pattern="^back_to_start$"))
    application.add_handler(CallbackQueryHandler(handle_help_callback, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(handle_cancel_callback, pattern="^cancel$"))
    application.add_handler(CallbackQueryHandler(handle_check_status_callback, pattern="^check_status$"))
    application.add_handler(CallbackQueryHandler(handle_continue_to_menu, pattern="^continue_to_menu$"))
    
    # Callbacks de renova√ß√£o
    application.add_handler(CallbackQueryHandler(handle_renewal, pattern=r"^renew_\d+$"))
    
    # Handlers de grupo
    application.add_handler(MessageHandler(
        filters.StatusUpdate.NEW_CHAT_MEMBERS,
        handle_new_chat_members
    ))
    application.add_handler(MessageHandler(
        filters.ChatType.GROUPS & filters.StatusUpdate.CHAT_CREATED,
        handle_join_request
    ))
    
    # Handler gen√©rico para callbacks n√£o reconhecidos (deve ser o √∫ltimo)
    application.add_handler(CallbackQueryHandler(handle_unknown_callback))
    
    logger.info("‚úÖ Handlers configurados com sucesso!")

def main():
    """Fun√ß√£o principal do bot"""
    # Token do bot
    bot_token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN n√£o configurado!")
        return
    
    try:
        # CORRE√á√ÉO: Criar aplica√ß√£o sem job_queue se houver problema
        try:
            # Tentar criar normalmente
            application = Application.builder().token(bot_token).build()
        except TypeError as e:
            # Se falhar, criar sem job_queue
            logger.warning("Criando aplica√ß√£o sem job_queue devido a erro de weak reference")
            application = Application.builder().token(bot_token).job_queue(None).build()
        
        # Configurar handlers
        setup_handlers(application)
        
        # Adicionar callback de inicializa√ß√£o
        application.post_init = post_init
        
        # Iniciar bot
        logger.info("ü§ñ Bot TeleVIP iniciando...")
        logger.info("Pressione Ctrl+C para parar")
        
        # Executar bot
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"Erro ao iniciar bot: {e}", exc_info=True)
        raise

if __name__ == '__main__':
    main()