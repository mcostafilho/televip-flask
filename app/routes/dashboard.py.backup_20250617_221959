# app/routes/dashboard.py
from flask import Blueprint, render_template, jsonify, request, redirect, url_for, flash, session
from flask_login import login_required, current_user
from app import db
from app.models import Group, Transaction, Subscription, Creator, PricingPlan
from app.services.payment_service import PaymentService
from sqlalchemy import func, and_, desc
from datetime import datetime, timedelta

bp = Blueprint('dashboard', __name__, url_prefix='/dashboard')

def calculate_balance(creator_id):
    """Calcular saldo disponível considerando taxas de R$ 0,99 + 7,99%"""
    from app.models import Transaction, Subscription, Group
    
    # Buscar todas as transações completas
    transactions = Transaction.query.join(
        Subscription
    ).join(
        Group
    ).filter(
        Group.creator_id == creator_id,
        Transaction.status == 'completed'
    ).all()
    
    total_received = 0
    total_fees = 0
    
    for transaction in transactions:
        # Valor bruto da transação
        amount = float(transaction.amount)
        
        # Calcular taxas
        fixed_fee = 0.99  # Taxa fixa
        percentage_fee = amount * 0.0799  # 7,99%
        total_fee = fixed_fee + percentage_fee
        
        # Valor líquido
        net_amount = amount - total_fee
        
        total_received += amount
        total_fees += total_fee
    
    # Saldo disponível
    available_balance = total_received - total_fees
    
    return {
        'total_received': total_received,
        'total_fees': total_fees,
        'available_balance': available_balance,
        'transaction_count': len(transactions)
    }

@bp.route('/')
@login_required
def index():
    """Dashboard principal do criador"""
    # Calcular saldo com as taxas corretas
    balance_info = calculate_balance(current_user.id)
    
    # Buscar grupos do criador
    groups = Group.query.filter_by(creator_id=current_user.id).all()
    
    # Calcular estatísticas
    total_groups = len(groups)
    active_groups = 0
    total_subscribers = 0
    
    for group in groups:
        # Receita do grupo
        group_revenue = db.session.query(func.sum(Transaction.amount)).join(
            Subscription
        ).filter(
            Subscription.group_id == group.id,
            Transaction.status == 'completed'
        ).scalar() or 0
        
        group.total_revenue = group_revenue
        
        # Assinantes ativos
        active_subs = Subscription.query.filter_by(
            group_id=group.id,
            status='active'
        ).count()
        
        group.total_subscribers = active_subs
        total_subscribers += active_subs
        
        # Grupos ativos
        if group.is_active:
            active_groups += 1
    
    # Transações recentes
    recent_transactions = Transaction.query.join(
        Subscription
    ).join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Transaction.status == 'completed'
    ).order_by(
        Transaction.created_at.desc()
    ).limit(10).all()
    
    # Dados para gráfico (últimos 7 dias)
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=7)
    
    daily_revenue = db.session.query(
        func.date(Transaction.created_at).label('date'),
        func.sum(Transaction.amount).label('total')
    ).join(
        Subscription
    ).join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Transaction.status == 'completed',
        Transaction.created_at >= start_date
    ).group_by(
        func.date(Transaction.created_at)
    ).all()
    
    # Preparar dados do gráfico
    chart_labels = []
    chart_data = []
    current_date = start_date.date()
    
    revenue_dict = {r.date: float(r.total) for r in daily_revenue}
    
    while current_date <= end_date.date():
        chart_labels.append(current_date.strftime('%d/%m'))
        chart_data.append(revenue_dict.get(current_date, 0))
        current_date += timedelta(days=1)
    
    return render_template('dashboard/index.html',
        # Saldo e taxas
        available_balance=balance_info['available_balance'],
        balance=balance_info['available_balance'],  # Compatibilidade
        total_fees=balance_info['total_fees'],
        transaction_count=balance_info['transaction_count'],
        
        # Estatísticas gerais
        total_groups=total_groups,
        active_groups=active_groups,
        total_revenue=balance_info['total_received'],
        total_subscribers=total_subscribers,
        groups=groups,
        recent_transactions=recent_transactions,
        
        # Dados do gráfico
        chart_labels=chart_labels,
        chart_data=chart_data
    )

@bp.route('/transactions')
@login_required
def transactions():
    """Listar todas as transações"""
    page = request.args.get('page', 1, type=int)
    per_page = 20
    
    # Query base
    query = Transaction.query.join(
        Subscription
    ).join(
        Group
    ).filter(
        Group.creator_id == current_user.id
    )
    
    # Filtros
    status = request.args.get('status')
    if status:
        query = query.filter(Transaction.status == status)
    
    group_id = request.args.get('group_id', type=int)
    if group_id:
        query = query.filter(Subscription.group_id == group_id)
    
    # Ordenar por data
    query = query.order_by(Transaction.created_at.desc())
    
    # Paginar
    transactions = query.paginate(page=page, per_page=per_page, error_out=False)
    
    # Buscar grupos para filtro
    groups = Group.query.filter_by(creator_id=current_user.id).all()
    
    return render_template('dashboard/transactions.html',
        transactions=transactions,
        groups=groups
    )

@bp.route('/withdrawals')
@login_required
def withdrawals():
    """Histórico de saques"""
    # Implementar quando tiver o modelo de saques
    return render_template('dashboard/withdrawals.html')

@bp.route('/withdraw', methods=['POST'])
@login_required
def withdraw():
    """Solicitar saque"""
    amount = request.form.get('amount', type=float)
    
    # Calcular saldo disponível
    balance_info = calculate_balance(current_user.id)
    available_balance = balance_info['available_balance']
    
    if not amount or amount < 50:
        flash('Valor mínimo para saque é R$ 50,00', 'error')
        return redirect(url_for('dashboard.index'))
    
    if amount > available_balance:
        flash('Saldo insuficiente para saque', 'error')
        return redirect(url_for('dashboard.index'))
    
    # TODO: Implementar criação do saque
    flash(f'Saque de R$ {amount:.2f} solicitado com sucesso! Será processado em até 3 dias úteis.', 'success')
    
    return redirect(url_for('dashboard.index'))

@bp.route('/profile')
@login_required
def profile():
    """Perfil do criador"""
    return render_template('dashboard/profile.html')

@bp.route('/profile/update', methods=['POST'])
@login_required
def update_profile():
    """Atualizar perfil"""
    name = request.form.get('name')
    email = request.form.get('email')
    pix_key = request.form.get('pix_key')
    
    # Atualizar dados
    if name:
        current_user.name = name
    if email and email != current_user.email:
        # Verificar se email já existe
        if Creator.query.filter_by(email=email).first():
            flash('Este email já está em uso', 'error')
            return redirect(url_for('dashboard.profile'))
        current_user.email = email
    if pix_key:
        current_user.pix_key = pix_key
    
    db.session.commit()
    flash('Perfil atualizado com sucesso!', 'success')
    
    return redirect(url_for('dashboard.profile'))

@bp.route('/analytics')
@login_required
def analytics():
    """Analytics avançado"""
    # Período selecionado
    period = request.args.get('period', '30')
    if period == '7':
        days = 7
    elif period == '30':
        days = 30
    elif period == '90':
        days = 90
    else:
        days = 30
    
    start_date = datetime.utcnow() - timedelta(days=days)
    
    # Buscar grupos
    groups = Group.query.filter_by(creator_id=current_user.id).all()
    
    # Estatísticas gerais
    total_revenue = db.session.query(func.sum(Transaction.amount)).join(
        Subscription
    ).join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Transaction.status == 'completed',
        Transaction.created_at >= start_date
    ).scalar() or 0
    
    total_transactions = Transaction.query.join(
        Subscription
    ).join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Transaction.status == 'completed',
        Transaction.created_at >= start_date
    ).count()
    
    # Ticket médio
    average_ticket = total_revenue / total_transactions if total_transactions > 0 else 0
    
    # Assinantes
    total_subscribers = Subscription.query.join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Subscription.status == 'active'
    ).count()
    
    new_subscribers = Subscription.query.join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Subscription.created_at >= start_date
    ).count()
    
    # Dados para gráficos
    # Receita por dia
    daily_revenue = db.session.query(
        func.date(Transaction.created_at).label('date'),
        func.sum(Transaction.amount).label('total')
    ).join(
        Subscription
    ).join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Transaction.status == 'completed',
        Transaction.created_at >= start_date
    ).group_by(
        func.date(Transaction.created_at)
    ).all()
    
    # Preparar dados do gráfico de receita
    revenue_labels = []
    revenue_data = []
    current_date = start_date.date()
    end_date = datetime.utcnow().date()
    
    revenue_dict = {r.date: float(r.total) for r in daily_revenue}
    
    while current_date <= end_date:
        revenue_labels.append(current_date.strftime('%d/%m'))
        revenue_data.append(revenue_dict.get(current_date, 0))
        current_date += timedelta(days=1)
    
    # Assinantes por dia
    daily_subscribers = db.session.query(
        func.date(Subscription.created_at).label('date'),
        func.count(Subscription.id).label('total')
    ).join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Subscription.created_at >= start_date
    ).group_by(
        func.date(Subscription.created_at)
    ).all()
    
    # Preparar dados do gráfico de assinantes
    subscribers_labels = revenue_labels  # Mesmas datas
    subscribers_data = []
    subscribers_dict = {s.date: s.total for s in daily_subscribers}
    
    current_date = start_date.date()
    while current_date <= end_date:
        subscribers_data.append(subscribers_dict.get(current_date, 0))
        current_date += timedelta(days=1)
    
    # Receita por grupo
    group_revenue = db.session.query(
        Group.name,
        func.sum(Transaction.amount).label('total')
    ).join(
        Subscription, Group.id == Subscription.group_id
    ).join(
        Transaction
    ).filter(
        Group.creator_id == current_user.id,
        Transaction.status == 'completed',
        Transaction.created_at >= start_date
    ).group_by(
        Group.id, Group.name
    ).all()
    
    group_labels = [g.name for g in group_revenue]
    group_data = [float(g.total) for g in group_revenue]
    
    # Receita por plano
    plan_revenue = db.session.query(
        PricingPlan.name,
        func.sum(Transaction.amount).label('total')
    ).join(
        Subscription, PricingPlan.id == Subscription.plan_id
    ).join(
        Transaction
    ).join(
        Group
    ).filter(
        Group.creator_id == current_user.id,
        Transaction.status == 'completed',
        Transaction.created_at >= start_date
    ).group_by(
        PricingPlan.id, PricingPlan.name
    ).all()
    
    plan_labels = [p.name for p in plan_revenue]
    plan_data = [float(p.total) for p in plan_revenue]
    
    # Preparar dados para o template
    stats = {
        'total_revenue': total_revenue,
        'total_transactions': total_transactions,
        'average_ticket': average_ticket,
        'total_subscribers': total_subscribers,
        'new_subscribers': new_subscribers
    }
    
    # Preparar dados dos gráficos
    charts_data = {
        'revenue_by_day': {
            'labels': revenue_labels,
            'data': revenue_data
        },
        'subscribers_by_day': {
            'labels': subscribers_labels,
            'data': subscribers_data
        },
        'revenue_by_group': {
            'labels': group_labels,
            'data': group_data
        },
        'revenue_by_plan': {
            'labels': plan_labels,
            'data': plan_data
        }
    }
    
    return render_template(
        'dashboard/analytics.html',
        stats=stats,
        period=period,
        groups=groups,
        charts_data=charts_data
    )