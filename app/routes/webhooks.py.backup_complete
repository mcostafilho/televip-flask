"""
Webhooks para processar notifica√ß√µes de pagamento do Stripe
"""
from flask import Blueprint, request, jsonify
import stripe
import os
import logging
import requests
from datetime import datetime
from app import db
from app.models import Transaction, Subscription, Creator, Group

bp = Blueprint('webhooks', __name__, url_prefix='/webhooks')
logger = logging.getLogger(__name__)

# Configurar Stripe
stripe.api_key = os.getenv('STRIPE_SECRET_KEY')


@bp.route('/stripe', methods=['POST'])
def stripe_webhook():
    """Processar webhooks do Stripe - VERS√ÉO CORRIGIDA"""
    logger.info("=== WEBHOOK RECEBIDO DO STRIPE ===")
    
    payload = request.get_data()
    sig_header = request.headers.get('Stripe-Signature')
    
    logger.info(f"Signature header presente: {'Sim' if sig_header else 'N√£o'}")
    
    # Verificar assinatura
    webhook_secret = os.getenv('STRIPE_WEBHOOK_SECRET')
    
    if not webhook_secret:
        logger.error("STRIPE_WEBHOOK_SECRET n√£o configurado!")
        return jsonify({'error': 'Webhook secret not configured'}), 500
    
    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, webhook_secret
        )
    except ValueError as e:
        logger.error(f"Invalid payload: {e}")
        return jsonify({'error': 'Invalid payload'}), 400
    except stripe.error.SignatureVerificationError as e:
        logger.error(f"Invalid signature: {e}")
        return jsonify({'error': 'Invalid signature'}), 400
    
    # Log do evento recebido
    logger.info(f"Event type: {event['type']}")
    logger.info(f"Event ID: {event['id']}")
    
    # Processar diferentes tipos de eventos
    if event['type'] == 'checkout.session.completed':
        session = event['data']['object']
        handle_checkout_session_completed(session)
        
    elif event['type'] == 'payment_intent.succeeded':
        payment_intent = event['data']['object']
        handle_payment_intent_succeeded(payment_intent)
        
    elif event['type'] == 'payment_intent.payment_failed':
        payment_intent = event['data']['object']
        handle_payment_failed(payment_intent)
        
    elif event['type'] == 'charge.dispute.created':
        dispute = event['data']['object']
        handle_dispute_created(dispute)
    
    return jsonify({'status': 'success'}), 200


def handle_checkout_session_completed(session):
    """Processar checkout completo - VERS√ÉO CORRIGIDA"""
    logger.info(f"=== PROCESSANDO CHECKOUT SESSION COMPLETO ===")
    logger.info(f"Session ID: {session['id']}")
    logger.info(f"Payment Intent: {session.get('payment_intent')}")
    logger.info(f"Payment status: {session.get('payment_status')}")
    logger.info(f"Customer email: {session.get('customer_email')}")
    logger.info(f"Metadata: {session.get('metadata')}")
    
    # Verificar se o pagamento foi realmente completado
    if session.get('payment_status') != 'paid':
        logger.warning(f"Pagamento n√£o est√° pago. Status: {session.get('payment_status')}")
        return
    
    # Buscar transa√ß√£o pelo session_id
    transaction = Transaction.query.filter_by(
        stripe_session_id=session['id']
    ).first()
    
    if not transaction:
        logger.error(f"Transa√ß√£o n√£o encontrada para session: {session['id']}")
        # Tentar recuperar pelo metadata se dispon√≠vel
        if session.get('metadata', {}).get('user_id'):
            logger.info("Tentando recuperar transa√ß√£o por metadata...")
            # Implementar busca alternativa se necess√°rio
        return
    
    if transaction.status == 'completed':
        logger.info("Transa√ß√£o j√° foi processada anteriormente")
        return
    
    logger.info(f"Processando transa√ß√£o ID: {transaction.id}")
    
    # Atualizar transa√ß√£o
    transaction.status = 'completed'
    transaction.paid_at = datetime.utcnow()
    transaction.stripe_payment_intent_id = session.get('payment_intent')
    
    # Ativar assinatura
    subscription = transaction.subscription
    subscription.status = 'active'
    
    logger.info(f"Ativando assinatura ID: {subscription.id}")
    
    # Atualizar saldo do criador
    group = subscription.group
    creator = group.creator
    # Atualizar saldo do criador
    if hasattr(creator, 'available_balance'):
        # Atualizar saldo do criador
    if hasattr(creator, 'available_balance'):
        creator.available_balance = (creator.available_balance or 0) + transaction.net_amount
    else:
        # Adicionar campo se n√£o existir
        db.session.execute(f"UPDATE creators SET available_balance = COALESCE(available_balance, 0) + {transaction.net_amount} WHERE id = {creator.id}")
    else:
        # Adicionar campo se n√£o existir
        db.session.execute(f"UPDATE creators SET available_balance = COALESCE(available_balance, 0) + {transaction.net_amount} WHERE id = {creator.id}")
    
    logger.info(f"Atualizando saldo do criador {creator.id}: +{transaction.net_amount}")
    
    # Commit das altera√ß√µes
    try:
        db.session.commit()
        logger.info("‚úÖ Transa√ß√£o processada com sucesso!")
        
        # Notificar o bot sobre o pagamento completo
        notify_bot_payment_completed(
            user_id=subscription.telegram_user_id,
            group_id=group.telegram_id,
            group_name=group.name,
            subscription_id=subscription.id
        )
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"Erro ao processar transa√ß√£o: {e}")
        raise


def handle_payment_intent_succeeded(payment_intent):
    """Processar payment intent bem-sucedido"""
    logger.info(f"=== PAYMENT INTENT SUCCEEDED ===")
    logger.info(f"Payment Intent ID: {payment_intent['id']}")
    logger.info(f"Amount: {payment_intent['amount']/100} {payment_intent['currency']}")
    
    # Buscar transa√ß√£o por payment_intent_id
    transaction = Transaction.query.filter_by(
        stripe_payment_intent_id=payment_intent['id']
    ).first()
    
    if transaction and transaction.status != 'completed':
        transaction.status = 'completed'
        transaction.paid_at = datetime.utcnow()
        
        subscription = transaction.subscription
        subscription.status = 'active'
        
        group = subscription.group
        creator = group.creator
        # Atualizar saldo do criador
    if hasattr(creator, 'available_balance'):
        # Atualizar saldo do criador
    if hasattr(creator, 'available_balance'):
        creator.available_balance = (creator.available_balance or 0) + transaction.net_amount
    else:
        # Adicionar campo se n√£o existir
        db.session.execute(f"UPDATE creators SET available_balance = COALESCE(available_balance, 0) + {transaction.net_amount} WHERE id = {creator.id}")
    else:
        # Adicionar campo se n√£o existir
        db.session.execute(f"UPDATE creators SET available_balance = COALESCE(available_balance, 0) + {transaction.net_amount} WHERE id = {creator.id}")
        
        db.session.commit()
        logger.info("‚úÖ Payment intent processado com sucesso!")


def handle_payment_failed(payment_intent):
    """Processar falha no pagamento"""
    logger.info(f"=== PAYMENT FAILED ===")
    logger.info(f"Payment Intent ID: {payment_intent['id']}")
    logger.info(f"Error: {payment_intent.get('last_payment_error')}")
    
    # Buscar transa√ß√£o
    transaction = Transaction.query.filter_by(
        stripe_payment_intent_id=payment_intent['id']
    ).first()
    
    if transaction:
        transaction.status = 'failed'
        
        subscription = transaction.subscription
        subscription.status = 'failed'
        
        db.session.commit()
        
        # Notificar usu√°rio sobre falha
        notify_bot_payment_failed(
            user_id=subscription.telegram_user_id,
            group_name=subscription.group.name,
            error=payment_intent.get('last_payment_error', {}).get('message', 'Erro desconhecido')
        )


def handle_dispute_created(dispute):
    """Processar disputa (chargeback)"""
    logger.warning(f"=== DISPUTA CRIADA ===")
    logger.warning(f"Dispute ID: {dispute['id']}")
    logger.warning(f"Amount: {dispute['amount']/100}")
    logger.warning(f"Reason: {dispute['reason']}")
    
    # Implementar l√≥gica para lidar com chargebacks
    # Por exemplo: suspender assinatura, notificar admin, etc.


def notify_bot_payment_completed(user_id, group_id, group_name, subscription_id):
    """Notificar o bot sobre pagamento completo e adicionar usu√°rio ao grupo"""
    bot_token = os.getenv('BOT_TOKEN')
    
    if not bot_token:
        logger.error("BOT_TOKEN n√£o configurado!")
        return
    
    try:
        # 1. Enviar mensagem de confirma√ß√£o para o usu√°rio
        message_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        message_text = f"""
‚úÖ **Pagamento Confirmado!**

Seu pagamento foi processado com sucesso!

üì± **Grupo:** {group_name}
üé´ **ID da Assinatura:** #{subscription_id}

üîÑ Estamos adicionando voc√™ ao grupo...

üí° Se n√£o for adicionado automaticamente em 1 minuto:
1. Clique em /start
2. V√° em "Minhas Assinaturas"
3. Clique no grupo desejado

Obrigado pela sua confian√ßa! üôè
"""
        
        # Adicionar bot√µes inline
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üì± Minhas Assinaturas", "callback_data": "my_subscriptions"},
                    {"text": "üè† Menu", "callback_data": "back_to_start"}
                ]
            ]
        }
        
        message_data = {
            'chat_id': user_id,
            'text': message_text,
            'parse_mode': 'Markdown',
            'reply_markup': keyboard
        }
        
        response = requests.post(message_url, json=message_data)
        logger.info(f"Mensagem enviada: {response.status_code} - {response.text}")
        
        # 2. Tentar adicionar o usu√°rio ao grupo
        add_member_url = f"https://api.telegram.org/bot{bot_token}/addChatMember"
        
        add_data = {
            'chat_id': group_id,
            'user_id': int(user_id)
        }
        
        add_response = requests.post(add_member_url, json=add_data)
        logger.info(f"Tentativa de adicionar ao grupo: {add_response.status_code}")
        
        if add_response.status_code == 200:
            logger.info(f"‚úÖ Usu√°rio {user_id} adicionado ao grupo {group_id}")
        else:
            error_data = add_response.json()
            logger.warning(f"N√£o foi poss√≠vel adicionar ao grupo: {error_data}")
            
            # Se n√£o conseguiu adicionar, enviar link de convite
            if 'user not found' in str(error_data).lower():
                # Gerar link de convite
                export_link_url = f"https://api.telegram.org/bot{bot_token}/exportChatInviteLink"
                link_data = {'chat_id': group_id}
                
                link_response = requests.post(export_link_url, json=link_data)
                if link_response.status_code == 200:
                    invite_link = link_response.json().get('result')
                    
                    # Enviar link para o usu√°rio
                    invite_message = f"""
üîó **Link de Acesso ao Grupo**

Como n√£o conseguimos adicionar voc√™ automaticamente, aqui est√° o link de convite:

{invite_link}

‚ö†Ô∏è Este link √© v√°lido apenas para voc√™ e expira em 24 horas.
"""
                    
                    requests.post(message_url, json={
                        'chat_id': user_id,
                        'text': invite_message,
                        'parse_mode': 'Markdown'
                    })
        
    except Exception as e:
        logger.error(f"Erro ao notificar bot: {e}")


def notify_bot_payment_failed(user_id, group_name, error):
    """Notificar usu√°rio sobre falha no pagamento"""
    bot_token = os.getenv('BOT_TOKEN')
    
    if not bot_token:
        return
    
    try:
        message_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        message_text = f"""
‚ùå **Pagamento Falhou**

Houve um problema ao processar seu pagamento para o grupo **{group_name}**.

**Erro:** {error}

Por favor, tente novamente ou use outro cart√£o.

Se o problema persistir, entre em contato com o suporte.
"""
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üîÑ Tentar Novamente", "callback_data": "discover"},
                    {"text": "üìû Suporte", "url": "https://t.me/suporte_televip"}
                ]
            ]
        }
        
        message_data = {
            'chat_id': user_id,
            'text': message_text,
            'parse_mode': 'Markdown',
            'reply_markup': keyboard
        }
        
        requests.post(message_url, json=message_data)
        
    except Exception as e:
        logger.error(f"Erro ao notificar falha: {e}")


# Fun√ß√£o auxiliar para verificar assinatura do webhook (seguran√ßa extra)
def verify_webhook_signature(payload, signature, secret):
    """Verificar assinatura do webhook manualmente"""
    import hmac
    import hashlib
    
    expected_sig = hmac.new(
        secret.encode('utf-8'),
        payload,
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(expected_sig, signature)